{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TB/NTM species identification pipeline Version 1.0 (beta) \u00b6 Short Description \u00b6 The pipeline is constructed using nextflow as workflow manager running in a docker container. It is able to identify species of TB/nTM from positive MGIT cultures. To do so it uses a hsp65 database for fast identification coupled with a Metagenomic method using centrifuge to identify on genome level. For TB it also is able to identify subspecies. Results are presented in automated pdf and html reports. installation notes: \u00b6 OPTION1 (build docker image from scratch) \u00b6 install docker https://www.docker.com/products/docker-desktop git clone https://github.com/JordyCoolen/MyCodentifier.git cd MyCodentifier docker build --rm -t jonovox/mycodentifier:1.0 ./ or \u00b6 OPTION2 (pull docker image from docker hub) \u00b6 install docker https://www.docker.com/products/docker-desktop git clone https://github.com/JordyCoolen/MyCodentifier.git cd MyCodentifier docker pull jonovox/mycodentifier:1.0 CONDA environments (prebuild) \u00b6 download the newest release of the pipeline via: https://surfdrive.surf.nl/files/index.php/s/azkU2t09zY1r9qB and extract into the Mycodentifier folder Databases \u00b6 currently the databases are not provided we will provide in future versions the databases please contact us for more information create singularity .sif out of docker image \u00b6 bash docker/create_singularity_image.sh <filename> <imagename> example: bash docker/create_singularity_image.sh mycodentifier_1_0 mycodentifier:1.0 run TEST sample: \u00b6 cd Mycodentifier sh docker/run.sh mycodentifier jonovox/mycodentifier:1.0 cd /workflow # test sample nextflow run myco.nf --reads \"/workflow/test/H37Rv_MB_R{1,2}.fastq.gz\" --threads 8 --sampleName TEST \\ --centrifuge_cont \"/workflow/db/centrifuge_db/refv2\" --centrifuge_WGS \"/workflow/db/centrifuge_db/refv2\" -resume Example usage: \u00b6 singularity use \u00b6 singularity exec -B </path/to/newcode>:/workflow,</path/to/fastq.gz/files:/data mycodentifier_v1_72.sif \\ nextflow run /workflow/myco.nf --threads 16 --outDir /workflow/output --snpEff_base /ifs/software/external/mmb/singularity_images/snpEff/ \\ -resume --reads \"/data/<samplename>_R{1,2}.fastq.gz\" --sampleName <samplename> singularity exec -B /ifs/data/mmb/nextseq/runs/200309_NB501730_0373_AHYC7YAFXY/demultiplex/merged_lanes:/data,/ifs/software/external/mmb/mycodentifier:/workflow \\ mycodentifier_v1_72.sif nextflow run /workflow/myco.nf --reads '/data/20090667701-1nieuw_MB_R{1,2}.fastq.gz' --threads 16 --outDir /ifs/software/external/mmb/singularity_images \\ --snpeff_base snpEff/ --sampleName 20090667701-1nieuw_MB Example of docker run: \u00b6 docker run \\ -it \\ --rm \\ --name mycoprofiler2 \\ --mount type=bind,source=/location/to/centrifuge/contaminants/database,target=/workflow/db/centrifuge_contaminant,readonly \\ mycodentifier:latest /bin/bash Output files (TEST example) \u00b6 output/TEST \u251c\u2500\u2500 GATK \u2502 \u2514\u2500\u2500 raw.snps.indels_TEST.final_rg_MD.vcf \u251c\u2500\u2500 NC_000962.3 \u2502 \u2514\u2500\u2500 NC_000962.3_filt_genomic.dict \u251c\u2500\u2500 SNPFasta \u2502 \u2514\u2500\u2500 TEST_altref.fasta.gz \u251c\u2500\u2500 SNPIT \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u2514\u2500\u2500 TEST_20220502144828_qc.json \u251c\u2500\u2500 WGS_typing \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u2514\u2500\u2500 TEST_report.file \u251c\u2500\u2500 annot \u2502 \u251c\u2500\u2500 TEST_snps_indels_filt_annot.vcf \u2502 \u2514\u2500\u2500 snpEff_summary.html \u251c\u2500\u2500 bam_qc \u2502 \u251c\u2500\u2500 BAM_QC.txt \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u251c\u2500\u2500 TEST_20220502144828_qc.json \u2502 \u2514\u2500\u2500 avg_dp.txt \u251c\u2500\u2500 bamfiles \u2502 \u251c\u2500\u2500 TEST.bam \u2502 \u251c\u2500\u2500 TEST.bam.bai \u2502 \u251c\u2500\u2500 TEST.final.bam \u2502 \u251c\u2500\u2500 TEST.final.bam.bai \u2502 \u251c\u2500\u2500 TEST.final_rg.bam -> /workflow/work/9e/5cb0668a42153d1a5d191b9ba9c917/TEST.final_rg.bam \u2502 \u251c\u2500\u2500 TEST.final_rg.bam.bai -> /workflow/work/9e/5cb0668a42153d1a5d191b9ba9c917/TEST.final_rg.bam.bai \u2502 \u251c\u2500\u2500 TEST.final_rg_MD.bam -> /workflow/work/07/61441a8a33aef5b0da3436460176df/TEST.final_rg_MD.bam \u2502 \u251c\u2500\u2500 TEST.final_rg_MD.bam.bai -> /workflow/work/07/61441a8a33aef5b0da3436460176df/TEST.final_rg_MD.bam.bai \u2502 \u251c\u2500\u2500 TEST_subsampled_2C.bam \u2502 \u2514\u2500\u2500 TEST_subsampled_2C.bam.bai \u251c\u2500\u2500 centrifuge \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u251c\u2500\u2500 TEST_report.file \u2502 \u2514\u2500\u2500 TEST_spreporter.out \u251c\u2500\u2500 contaminants \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u2514\u2500\u2500 TEST_report.file \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 genomes \u2502 \u2514\u2500\u2500 NC_000962.3 \u2502 \u251c\u2500\u2500 NC_000962.3_filt_genomic.fa \u2502 \u251c\u2500\u2500 NC_000962.3_filt_genomic.fa.fai \u2502 \u251c\u2500\u2500 NC_000962.3_genomic.gbff \u2502 \u2514\u2500\u2500 NC_000962.3_genomic.gff \u251c\u2500\u2500 delly \u2502 \u2514\u2500\u2500 TEST_delly.vcf.gz \u251c\u2500\u2500 fastp \u2502 \u251c\u2500\u2500 H37Rv_MB_R1.fastq_fastp.fastq.gz \u2502 \u251c\u2500\u2500 H37Rv_MB_R2.fastq_fastp.fastq.gz \u2502 \u251c\u2500\u2500 TEST.fastp_json \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u2514\u2500\u2500 TEST_20220502144828.json \u251c\u2500\u2500 filtered \u2502 \u251c\u2500\u2500 TEST_delly_filt.vcf \u2502 \u251c\u2500\u2500 TEST_filtered_snps.vcf \u2502 \u251c\u2500\u2500 TEST_flagged_snps.vcf \u2502 \u251c\u2500\u2500 TEST_gatk_delly_merged.sorted.vcf \u2502 \u2514\u2500\u2500 raw.snps.indels_TEST.final_rg_MD_flagged_indels.vcf \u251c\u2500\u2500 hsp65 \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u251c\u2500\u2500 hsp65.aln \u2502 \u2514\u2500\u2500 hsp65.res \u251c\u2500\u2500 json \u2502 \u2514\u2500\u2500 TEST.fastp_json \u251c\u2500\u2500 merged \u2502 \u2514\u2500\u2500 TEST_snps_indels_filt.vcf \u251c\u2500\u2500 mutations \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u2514\u2500\u2500 TEST_20220502144828_qc.json \u2514\u2500\u2500 report \u251c\u2500\u2500 TEST.html \u251c\u2500\u2500 TEST.pdf \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2514\u2500\u2500 TEST_20220502144828_qc.json Flow diagram of current pipeline: \u00b6 Authors code \u00b6 J.P.M. Coolen H. Severin Tool References \u00b6 fastp Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 centrifuge https://ccb.jhu.edu/software/centrifuge/manual.shtml KMA Clausen, P.T.L.C., Aarestrup, F.M. & Lund, O. Rapid and precise alignment of raw reads against redundant databases with KMA. BMC Bioinformatics 19, 307 (2018). https://doi.org/10.1186/s12859-018-2336-6 SNP-IT Lipworth S, Jajou R, de Neeling A, et al. SNP-IT Tool for Identifying Subspecies and Associated Lineages of Mycobacterium tuberculosis Complex. Emerging Infectious Diseases. 2019;25(3):482-488. doi:10.3201/eid2503.180894. gatk Van der Auwera GA & O'Connor BD. (2020). Genomics in the Cloud: Using Docker, GATK, and WDL in Terra (1 st Edition). O'Reilly Media. bwa-mem Li H. and Durbin R. (2009) Fast and accurate short read alignment with Burrows-Wheeler Transform. Bioinformatics, 25:1754-60. [PMID: 19451168] delly Tobias Rausch, Thomas Zichner, Andreas Schlattl, Adrian M. Stuetz, Vladimir Benes, Jan O. Korbel. DELLY: structural variant discovery by integrated paired-end and split-read analysis. Bioinformatics. 2012 Sep 15;28(18):i333-i339. https://doi.org/10.1093/bioinformatics/bts378 Citation \u00b6 Currently in submission fase: MGIT enriched shotgun metagenomics for routine identification of nontuberculous mycobacteria: a route to personalized healthcare Jodie A. Schildkraut1*, Jordy P.M. Coolen1*, Heleen Severin1, Ellen Koenraad1, Nicole Aalders1, Willem J.G. Melchers1, Wouter Hoefsloot2, Heiman F.L. Wertheim1, Jakko van Ingen1 1) Radboudumc Center for Infectious Diseases, Department of Medical Microbiology, Radboud University Medical Center, Nijmegen, the Netherlands 2) Radboudumc Center for Infectious Diseases, Department of pulmonary diseases, Radboud University Medical Center, Nijmegen, the Netherlands *Authors contributed equally","title":"Home"},{"location":"#tbntm-species-identification-pipeline-version-10-beta","text":"","title":"TB/NTM species identification pipeline Version 1.0 (beta)"},{"location":"#short-description","text":"The pipeline is constructed using nextflow as workflow manager running in a docker container. It is able to identify species of TB/nTM from positive MGIT cultures. To do so it uses a hsp65 database for fast identification coupled with a Metagenomic method using centrifuge to identify on genome level. For TB it also is able to identify subspecies. Results are presented in automated pdf and html reports.","title":"Short Description"},{"location":"#installation-notes","text":"","title":"installation notes:"},{"location":"#option1-build-docker-image-from-scratch","text":"install docker https://www.docker.com/products/docker-desktop git clone https://github.com/JordyCoolen/MyCodentifier.git cd MyCodentifier docker build --rm -t jonovox/mycodentifier:1.0 ./","title":"OPTION1 (build docker image from scratch)"},{"location":"#or","text":"","title":"or"},{"location":"#option2-pull-docker-image-from-docker-hub","text":"install docker https://www.docker.com/products/docker-desktop git clone https://github.com/JordyCoolen/MyCodentifier.git cd MyCodentifier docker pull jonovox/mycodentifier:1.0","title":"OPTION2 (pull docker image from docker hub)"},{"location":"#conda-environments-prebuild","text":"download the newest release of the pipeline via: https://surfdrive.surf.nl/files/index.php/s/azkU2t09zY1r9qB and extract into the Mycodentifier folder","title":"CONDA environments (prebuild)"},{"location":"#databases","text":"currently the databases are not provided we will provide in future versions the databases please contact us for more information","title":"Databases"},{"location":"#create-singularity-sif-out-of-docker-image","text":"bash docker/create_singularity_image.sh <filename> <imagename> example: bash docker/create_singularity_image.sh mycodentifier_1_0 mycodentifier:1.0","title":"create singularity .sif out of docker image"},{"location":"#run-test-sample","text":"cd Mycodentifier sh docker/run.sh mycodentifier jonovox/mycodentifier:1.0 cd /workflow # test sample nextflow run myco.nf --reads \"/workflow/test/H37Rv_MB_R{1,2}.fastq.gz\" --threads 8 --sampleName TEST \\ --centrifuge_cont \"/workflow/db/centrifuge_db/refv2\" --centrifuge_WGS \"/workflow/db/centrifuge_db/refv2\" -resume","title":"run TEST sample:"},{"location":"#example-usage","text":"","title":"Example usage:"},{"location":"#singularity-use","text":"singularity exec -B </path/to/newcode>:/workflow,</path/to/fastq.gz/files:/data mycodentifier_v1_72.sif \\ nextflow run /workflow/myco.nf --threads 16 --outDir /workflow/output --snpEff_base /ifs/software/external/mmb/singularity_images/snpEff/ \\ -resume --reads \"/data/<samplename>_R{1,2}.fastq.gz\" --sampleName <samplename> singularity exec -B /ifs/data/mmb/nextseq/runs/200309_NB501730_0373_AHYC7YAFXY/demultiplex/merged_lanes:/data,/ifs/software/external/mmb/mycodentifier:/workflow \\ mycodentifier_v1_72.sif nextflow run /workflow/myco.nf --reads '/data/20090667701-1nieuw_MB_R{1,2}.fastq.gz' --threads 16 --outDir /ifs/software/external/mmb/singularity_images \\ --snpeff_base snpEff/ --sampleName 20090667701-1nieuw_MB","title":"singularity use"},{"location":"#example-of-docker-run","text":"docker run \\ -it \\ --rm \\ --name mycoprofiler2 \\ --mount type=bind,source=/location/to/centrifuge/contaminants/database,target=/workflow/db/centrifuge_contaminant,readonly \\ mycodentifier:latest /bin/bash","title":"Example of docker run:"},{"location":"#output-files-test-example","text":"output/TEST \u251c\u2500\u2500 GATK \u2502 \u2514\u2500\u2500 raw.snps.indels_TEST.final_rg_MD.vcf \u251c\u2500\u2500 NC_000962.3 \u2502 \u2514\u2500\u2500 NC_000962.3_filt_genomic.dict \u251c\u2500\u2500 SNPFasta \u2502 \u2514\u2500\u2500 TEST_altref.fasta.gz \u251c\u2500\u2500 SNPIT \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u2514\u2500\u2500 TEST_20220502144828_qc.json \u251c\u2500\u2500 WGS_typing \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u2514\u2500\u2500 TEST_report.file \u251c\u2500\u2500 annot \u2502 \u251c\u2500\u2500 TEST_snps_indels_filt_annot.vcf \u2502 \u2514\u2500\u2500 snpEff_summary.html \u251c\u2500\u2500 bam_qc \u2502 \u251c\u2500\u2500 BAM_QC.txt \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u251c\u2500\u2500 TEST_20220502144828_qc.json \u2502 \u2514\u2500\u2500 avg_dp.txt \u251c\u2500\u2500 bamfiles \u2502 \u251c\u2500\u2500 TEST.bam \u2502 \u251c\u2500\u2500 TEST.bam.bai \u2502 \u251c\u2500\u2500 TEST.final.bam \u2502 \u251c\u2500\u2500 TEST.final.bam.bai \u2502 \u251c\u2500\u2500 TEST.final_rg.bam -> /workflow/work/9e/5cb0668a42153d1a5d191b9ba9c917/TEST.final_rg.bam \u2502 \u251c\u2500\u2500 TEST.final_rg.bam.bai -> /workflow/work/9e/5cb0668a42153d1a5d191b9ba9c917/TEST.final_rg.bam.bai \u2502 \u251c\u2500\u2500 TEST.final_rg_MD.bam -> /workflow/work/07/61441a8a33aef5b0da3436460176df/TEST.final_rg_MD.bam \u2502 \u251c\u2500\u2500 TEST.final_rg_MD.bam.bai -> /workflow/work/07/61441a8a33aef5b0da3436460176df/TEST.final_rg_MD.bam.bai \u2502 \u251c\u2500\u2500 TEST_subsampled_2C.bam \u2502 \u2514\u2500\u2500 TEST_subsampled_2C.bam.bai \u251c\u2500\u2500 centrifuge \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u251c\u2500\u2500 TEST_report.file \u2502 \u2514\u2500\u2500 TEST_spreporter.out \u251c\u2500\u2500 contaminants \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u2514\u2500\u2500 TEST_report.file \u251c\u2500\u2500 db \u2502 \u2514\u2500\u2500 genomes \u2502 \u2514\u2500\u2500 NC_000962.3 \u2502 \u251c\u2500\u2500 NC_000962.3_filt_genomic.fa \u2502 \u251c\u2500\u2500 NC_000962.3_filt_genomic.fa.fai \u2502 \u251c\u2500\u2500 NC_000962.3_genomic.gbff \u2502 \u2514\u2500\u2500 NC_000962.3_genomic.gff \u251c\u2500\u2500 delly \u2502 \u2514\u2500\u2500 TEST_delly.vcf.gz \u251c\u2500\u2500 fastp \u2502 \u251c\u2500\u2500 H37Rv_MB_R1.fastq_fastp.fastq.gz \u2502 \u251c\u2500\u2500 H37Rv_MB_R2.fastq_fastp.fastq.gz \u2502 \u251c\u2500\u2500 TEST.fastp_json \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u2514\u2500\u2500 TEST_20220502144828.json \u251c\u2500\u2500 filtered \u2502 \u251c\u2500\u2500 TEST_delly_filt.vcf \u2502 \u251c\u2500\u2500 TEST_filtered_snps.vcf \u2502 \u251c\u2500\u2500 TEST_flagged_snps.vcf \u2502 \u251c\u2500\u2500 TEST_gatk_delly_merged.sorted.vcf \u2502 \u2514\u2500\u2500 raw.snps.indels_TEST.final_rg_MD_flagged_indels.vcf \u251c\u2500\u2500 hsp65 \u2502 \u251c\u2500\u2500 TEST_20220502142245.json \u2502 \u251c\u2500\u2500 TEST_20220502144828.json \u2502 \u251c\u2500\u2500 hsp65.aln \u2502 \u2514\u2500\u2500 hsp65.res \u251c\u2500\u2500 json \u2502 \u2514\u2500\u2500 TEST.fastp_json \u251c\u2500\u2500 merged \u2502 \u2514\u2500\u2500 TEST_snps_indels_filt.vcf \u251c\u2500\u2500 mutations \u2502 \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2502 \u2514\u2500\u2500 TEST_20220502144828_qc.json \u2514\u2500\u2500 report \u251c\u2500\u2500 TEST.html \u251c\u2500\u2500 TEST.pdf \u251c\u2500\u2500 TEST_20220502142245_qc.json \u2514\u2500\u2500 TEST_20220502144828_qc.json","title":"Output files (TEST example)"},{"location":"#flow-diagram-of-current-pipeline","text":"","title":"Flow diagram of current pipeline:"},{"location":"#authors-code","text":"J.P.M. Coolen H. Severin","title":"Authors code"},{"location":"#tool-references","text":"fastp Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884\u2013i890, https://doi.org/10.1093/bioinformatics/bty560 centrifuge https://ccb.jhu.edu/software/centrifuge/manual.shtml KMA Clausen, P.T.L.C., Aarestrup, F.M. & Lund, O. Rapid and precise alignment of raw reads against redundant databases with KMA. BMC Bioinformatics 19, 307 (2018). https://doi.org/10.1186/s12859-018-2336-6 SNP-IT Lipworth S, Jajou R, de Neeling A, et al. SNP-IT Tool for Identifying Subspecies and Associated Lineages of Mycobacterium tuberculosis Complex. Emerging Infectious Diseases. 2019;25(3):482-488. doi:10.3201/eid2503.180894. gatk Van der Auwera GA & O'Connor BD. (2020). Genomics in the Cloud: Using Docker, GATK, and WDL in Terra (1 st Edition). O'Reilly Media. bwa-mem Li H. and Durbin R. (2009) Fast and accurate short read alignment with Burrows-Wheeler Transform. Bioinformatics, 25:1754-60. [PMID: 19451168] delly Tobias Rausch, Thomas Zichner, Andreas Schlattl, Adrian M. Stuetz, Vladimir Benes, Jan O. Korbel. DELLY: structural variant discovery by integrated paired-end and split-read analysis. Bioinformatics. 2012 Sep 15;28(18):i333-i339. https://doi.org/10.1093/bioinformatics/bts378","title":"Tool References"},{"location":"#citation","text":"Currently in submission fase: MGIT enriched shotgun metagenomics for routine identification of nontuberculous mycobacteria: a route to personalized healthcare Jodie A. Schildkraut1*, Jordy P.M. Coolen1*, Heleen Severin1, Ellen Koenraad1, Nicole Aalders1, Willem J.G. Melchers1, Wouter Hoefsloot2, Heiman F.L. Wertheim1, Jakko van Ingen1 1) Radboudumc Center for Infectious Diseases, Department of Medical Microbiology, Radboud University Medical Center, Nijmegen, the Netherlands 2) Radboudumc Center for Infectious Diseases, Department of pulmonary diseases, Radboud University Medical Center, Nijmegen, the Netherlands *Authors contributed equally","title":"Citation"}]}